class Deque:
    """
    All class methods must have self as the first parameter.
    
    __init__(): the class constructor
    add_front(item): adds item to the front of the deque
    add_rear(item): adds item to the rear of the deque
    remove_front(): removes and returns the item at the front of the deque. Returns None if the deque is empty.
    remove_rear(): removes and returns the item at the rear of the deque. Returns None if the deque is empty.
    is_empty(): returns True if the queue is empty, False otherwise
    __len__(): supports calls to len(dequeue_object). returns the number of items in the deque
    """
    def __init__(self):
        self.lst = []

    def add_front(self, item):
        self.lst.insert(0,item)

    def add_rear(self, item):
        self.lst.append(item)

    def remove_front(self):
        if len(self.lst) > 0:
            front = self.lst[0]
            self.lst.remove(front)
            return front
        else:
            return None

    def remove_rear(self):
        if len(self.lst) > 0:
            rear = self.lst.pop()
            return rear
        else:
            return None
    def is_empty(self):
        if len(self.lst) == 0:
            return True
        else:
            return False
    def __len__(self):
        return len(self.lst)

x = Deque()






if __name__ == '__main__':
    # You may add code below this line to help you test.

    # You may comment out the calls to the test_xxx() functions to reduce the amount printed to the screen as you work.
    # Uncomment them when you are ready to test.

    from tests import DequeTests
    import sys

    suite = DequeTests(sys.modules[__name__])
    suite.test_01_constructor()
    suite.test_02_adds_and_removes()
    suite.test_03_remove_empty()
    suite.test_04_is_empty()
    suite.test_05__len__()
