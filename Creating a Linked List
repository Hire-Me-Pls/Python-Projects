class Node:
    """
    A class representing a Node in your linked list. 
    """
    def __init__(self, data=None, next=None):
        """
        :param data: the data item to hold in the node. Defaults to None
        :param next: a reference to the next node. Defaults to None
        """
        self.data = data
        self.next = next

    def __str__(self):
        return repr(self)

    def __repr__(self):
        return f"Node(data={str(self.data)})"


class LinkedList:

    def __init__(self):
        """
        LinkedList class constructor. 

        The self.head variable must always point to the first item in the list.
        The self.tail variable must always point to the last item in the list.
        self.size should contain an up-to-date count of the number of nodes in the list.
        """
        self.head = None
        self.tail = None
        self.size = 0

    def __iter__(self):
        """
        Do not modify this method. It allows you to iterate over the list with a for-loop. For example:

        x = LinkedList()
        x.add('Alice')
        x.add('Bob')
        for i in x:
            print(x)
        """
        current = self.head
        while current is not None:
            yield current
            current = current.next

    def add(self, item):
        """
        adds item to the beginning (head) of the list. This method does not return anything.
        This method must have a O(1) implementation.
        :param item: the data item to add to the beginning of the list
        """
        self.head = Node(item, self.head)
        self.size += 1

        # Handle the case where we are adding to an empty list.
        if self.tail is None:
            self.tail = self.head

    def __len__(self):
        """
        :return: the number of items in the list
        """
        return self.size

    def search(self, item):
        """
        Search for an item in the list.
        :param item: the item to search for.
        :return: True if the item is in the list, False otherwise.
        """
        curr = self.head
        while curr is not None:
            if curr.data == item:
                return True
            else:
                curr = curr.next

        return False

    def append(self, item):
        """
        appends the item to the end (tail) of the list. This method does not return anything.
        This method must have a O(1) implementation.
        :param item: the item to append to the end of the list
        """

        # Handle the case where we are appending to an empty list.
        if self.head is None:
            self.tail = self.head = Node(item)
        else:
            # Create a new node, point the old tail to it, and then update the tail to refer to the new node.
            self.tail.next = Node(item)
            self.tail = self.tail.next
        self.size += 1

    def remove(self, item):
        """
        Removes the first item from the list whose value is equal to item. This method does not return anything.
        Raise a ValueError if there is no such item in the list.
        :param item: the item to search for.
        """

        curr = self.head
        prev = None

        while curr is not None and curr.data != item:
            prev = curr
            curr = curr.next

        if curr is None:  # Item wasn't found or list is empty
            raise ValueError
        elif prev is None:  # Item is the head
            if self.tail == self.head:  # Check to see if you're deleting the only item in the list.
                self.tail = None
            self.head = curr.next
            self.size -= 1
        else:
            if curr == self.tail:      # Update the tail if you happen to be deleting the tail.
                self.tail = prev
            prev.next = curr.next
            self.size -= 1

    def pop(self, pos=None):
        """
        Removes the node at position pos and returns the Node's data. Calling pop() without an argument will result
        in pos=None, in which case remove and return the item at the end of the list.

        Raise an IndexError if the list is empty, or if pos is not in the range [0, len(list)-1].
        Raise a TypeError if pos is not an integer.

        pop(0) must be O(1)

        :param pos: the position (index) of the item to be popped
        :return: the data item in the node
        """

        # you could also do "if len(self) == 0:" provided that you correctly implement __len__
        if self.size == 0:
            raise IndexError

        # "if pos" is the same as saying "if pos != None"
        # So raise a TypeError if pos is not None and pos is not an integer.
        if pos and type(pos) != int:
            raise TypeError

        if pos is None:
            pos = self.size - 1
        elif pos < 0 or pos >= self.size:
            raise IndexError

        index = 0
        curr = self.head
        prev = None
        while index != pos:
            prev = curr
            curr = curr.next
            index += 1

        self.size -= 1
        result = curr.data
        if prev is None:
            if self.tail == self.head:
                self.tail = None
            self.head = self.head.next
        else:
            if curr == self.tail:
                self.tail = prev
            prev.next = curr.next

        return result

    def _find(self, pos):
        if len(self) == 0:
            raise IndexError

        if pos and type(pos) != int:
            raise TypeError

        if pos is None:
            pos = len(self)-1
        elif pos < 0 or pos >= len(self):
            raise IndexError

        index = 0
        curr = self.head
        prev = None
        while index != pos:
            prev = curr
            curr = curr.next
            index += 1

        return curr, prev

    def __getitem__(self, item):
        curr, _ = self._find(item)
        return curr.data

    def __setitem__(self, key, value):
        curr, _ = self._find(key)
        curr.data = value

    def __delitem__(self, key):
        curr, prev = self._find(key)
        if prev is None:
            if self.tail == self.head:
                self.tail = None
            self.head = self.head.next
        else:
            if curr == self.tail:
                self.tail = prev
            prev.next = curr.next
        self.size -= 1


if __name__ == "__main__":
    from linked_list_test import TestSuite
    import sys

    suite = TestSuite(sys.modules[__name__], "LinkedList")
    suite.test_add()
    suite.test_search()
    suite.test_append()
    suite.test_remove()
    suite.test_pop_empty_list()
    suite.test_pop_bad_argument()
    suite.test_pop_list_length_1()
    suite.test_pop_multiple_items()

    # Extra credit tests
    suite.test_extra_credit_getitem()
    suite.test_extra_credit_setitem()
    suite.test_extra_credit_delitem()
    # suite.test_extra_credit_reverse()

